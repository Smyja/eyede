#!/bin/bash

# create folder and cd into it
red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 5`
reset=`tput sgr0`

mkdir $1
folder=$1
while [[ $folder = "" ]]; do
    read -p 'Name of folder cant be blank. Enter name of folder: ' folder
done

echo "${yellow}Creating djangoproject folder...${reset}"

if [[ -z "$1" ]]; then
    mkdir $folder
    cd $folder
else
    cd $folder
fi

printf '\n# Location of project: '$(pwd)'\n'

# create vitual env and activate it
printf '\n# Creating and activating virtual enviroment (venv)\n'
python -m venv venv
source venv/scripts/activate

# update pip
# printf '\n# Upgrading pip to latest version \n'
# python3 -m pip install --upgrade pip

# install django
printf '\n# Installing django and other requirements\n'
pip install django

# django startproject base
echo "${yellow}Starting djangoproject...${reset}"
read -p 'Enter name of project: ' proj
while [[ $proj = "" ]]; do
   read -p 'Project_name cannot be empty, Enter name of app: ' proj
done
django-admin startproject $proj .
printf '\n# Create django app for $proj \n'
# django startapp $name_of_app
printf '\n\n'
read -p 'Enter name of app: ' app
while [[ $app = "" ]]; do
   read -p 'App_name cannot be empty, Enter name of app: ' app
done
python manage.py startapp $app

# output 
ls

printf '\n**************************** Writing to files **************************\n'

# base/settings.py
me=$(</dev/urandom tr -dc 'A-Za-z0-9!#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' | head -c 30)

cat > $proj/settings.py << _EOF_
"""
Django settings for $proj project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "$me"
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    '$app'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '$proj.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '$proj.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
_EOF_


echo "${yellow}created $proj/settings.py...${reset}"

# app/urls.py
cat > $app/urls.py << _EOF_
from django.urls import path
from $app import views

urlpatterns = [
    path('', views.home, name='home'),
]
_EOF_

printf '\n created '$app'/urls.py\n'

# base.urls.py
cat > $proj/urls.py << _EOF_
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('$app.urls'))
]
_EOF_

printf '\n created $proj/urls.py\n'

# app/views.py
cat > $app/views.py << _EOF_
from django.shortcuts import render

def home(request):
    return render(request, 'home.html', {})

_EOF_

printf '\n created '$app'/views.py\n'


# templates/home.html
cd $app
mkdir templates
cat > templates/home.html << _EOF_
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Home</title>
</head>
<body>
    <h2>Home</h2>
</body>
</html>
_EOF_

printf '\n created '$app'/templates/home.html\n'

cd ..

printf "\n ----------- starting server -------------\n\n"

python manage.py makemigrations
python manage.py migrate
python manage.py runserver


# jay='rrrr'
# printf '\n'$app' is mmmm'